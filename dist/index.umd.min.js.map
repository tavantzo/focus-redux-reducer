{"version":3,"sources":["webpack://boilerplate/webpack/universalModuleDefinition","webpack://boilerplate/webpack/bootstrap","webpack://boilerplate/./src/Reducer.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","ReducerFactory","_initialState","this","_state","Create","initialState","reducer","currentState","action","type","payload","extraParams","__rest","undefined","hasProto","updateState","mapActionToMethod","method","decMapToMethods","default","state","bind","updateStateProp","attribute","_a","newProps","assign","currentStateCopy","removeStateProp","actionType","types","_i","arguments","length","target","descriptor","forEach","TypeError","methodExists","constructor"],"mappings":"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","file":"index.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"boilerplate\"] = factory();\n\telse\n\t\troot[\"boilerplate\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { AnyAction, Reducer as ReduxReducer } from \"redux\";\nimport { PickByValue } from \"utility-types\";\n\nexport type State = {[props:string]: any};\n\nexport interface PayloadAction<T extends string | number | symbol = string, P = any > extends AnyAction {\n    type: T;\n    payload: P;\n}\n\nexport type Action = PayloadAction;\n\n/**\n * A base class for create class based reducers where methods are the action.type\n * to avoid the ugly looking switch block. Any reducer class must extend tha class\n *\n * @export\n * @class ReducerProvider\n */\nexport class ReducerFactory<SS extends State, AA extends Action = Action>{\n    private _state: SS = {} as SS;\n    [prop: string]: any;\n\n    protected constructor(private readonly _initialState: SS) {}\n\n    /**\n     * Returns a Redux reducer compatible function to be attached at a Redux store\n     *\n     * @returns function\n     * @memberof ReducerFactory\n     */\n    static Create<S = State, A extends Action = Action>(initialState: S): ReduxReducer<S, A> {\n        const reducer: ReducerFactory<S, A> = new this(initialState);\n\n        return function(this: ReducerFactory<S, A>, currentState: S | undefined, action): S {\n            const { type, payload, ...extraParams } = action;\n            if (currentState === undefined) {\n                this._state = this._initialState\n            } else {\n                this._state = currentState;\n            }\n\n            if (type === undefined) {\n                return this._initialState;\n            }\n\n            // Check if the object a method that matched the 'type' arguments\n            if (hasProto(this, type)) {\n                return this.updateState(this[type].call(this, payload, extraParams));\n            }\n\n            // Check if there is a mapped type with a method\n            if (type in this.mapActionToMethod()) {\n                const method = this.mapActionToMethod()[type];\n                return this.updateState(method.call(this, payload, extraParams));\n            }\n\n            // Check if there are decorated types\n            if (type in this.decMapToMethods) {\n                const method = this.decMapToMethods[type];\n                return this.updateState(method.call(this, payload, extraParams));\n            }\n\n            // Check if there is a default method\n            if (hasProto(this, 'default')) {\n                return this.updateState(this.default.call(this, payload, extraParams));\n            }\n\n            // All checks failed, just return the state as is.\n            return this.state;\n        }.bind(reducer);\n    }\n\n    get state(): SS { return this._state; }\n\n    /**\n     * The redux initialise hook. This should return the initial state unmodified\n     */\n    [\"@@INIT\"] () {\n        return this.state;\n    }\n\n    /**\n     * Returns an object that propnaierties are action names/types, while the value is a callable.\n     * Override to map actions with reducer methods.\n     *\n     * @returns object {ACTION_NAME: callable(state = [], payload, extra_params)}\n     * @memberof ReducerFactory\n     */\n    mapActionToMethod(): Record<Extract<\"type\", AA>, (p: Pick<AA, \"payload\">, ...e: any[]) => Partial<SS>> | {}  {\n        return {};\n    }\n\n    /**\n     * A helper method that returns a new state\n     *\n     * @param object The current state\n     * @param string The property name to add/update\n     * @param {any} The new value\n     * @returns object A new state object\n     * @memberof ReducerFactory\n     */\n    updateStateProp(attribute: keyof SS, value: any): SS {\n        return this.updateState({ [attribute]: value } as Partial<SS>);\n    }\n\n    /**\n     * Merges the current state with the given props and returns a fresh state object\n     *\n     * @param object newProps\n     * @returns object The new state\n     * @memberof ReducerFactory\n     */\n    updateState(newProps: Partial<SS>): SS {\n        this._state = Object.assign({}, this.state, newProps);\n        return this.state;\n    }\n\n    /**\n     * Returns a copy of the current state\n     *å\n        * @returns object\n        * @memberof ReducerFactory\n        */\n    currentStateCopy(): SS {\n        return Object.assign({}, this._state);\n    }\n\n    /**\n     * Removes a property from the current state and return a new state.\n     *\n     * @param object The current state\n     * @param string The property name\n     * @returns object A new state object\n     * @memberof ReducerFactory\n     */\n    removeStateProp(property: keyof SS): SS {\n        delete this.state[property];\n        return Object.assign({}, this._state, this._initialState);\n    }\n}\n\nconst decMapToMethods: {[prop: string]: Function} = {};\nReducerFactory.prototype.decMapToMethods = decMapToMethods;\n\n/* DECORATORS */\n\n/**\n * A Method decorator the to map action types with reducer methods.\n *\n * @param string[] types The action types that the decorated method should handle\n * @returns MethodDecorator\n */\nexport function actionType<S extends State, A extends Action = Action>(...types: string[]): MethodDecorator {\n    return <T = ReducerFactory<S, A>>(target, method: string | symbol, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> => {\n        types.forEach(type => {\n            target.decMapToMethods[type] = target[method].bind(target);\n        });\n\n        return descriptor;\n    }\n}\n\n/* HELPERS */\nconst methodExists = (object: object, name: string): boolean => {\n    return object.hasOwnProperty(name)\n        && typeof object[name] === 'function';\n};\n\nconst hasProto = (object: object, name: string): boolean => {\n    if (typeof name !== 'string' || (name.length === 0)) {\n        throw new TypeError('Should `name` to be of type `string` and not empty `value`');\n    }\n\n    return methodExists(object.constructor.prototype, name);\n};\n"],"sourceRoot":""}